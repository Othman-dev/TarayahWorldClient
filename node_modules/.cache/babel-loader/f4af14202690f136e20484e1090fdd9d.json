{"ast":null,"code":"var _jsxFileName = \"/home/othmay/repos/TarayahWorld/src/components/Planets/ScreenPlanet.js\";\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport firebase from '../../Firebase/firebase.js';\nimport News from './Screens/News.js';\nimport Art from './Screens/Art.js';\nimport Music from './Screens/Music.js';\nimport About from './Screens/About.js';\nimport Socials from './Screens/Socials.js';\nimport Contact from './Screens/Contact.js'; //----------firebase extractor\n\nfunction useData() {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const unsuscribe = firebase.firestore().collection('planets').onSnapshot(snapshot => {\n      const newData = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setData(newData);\n    });\n    return () => unsuscribe();\n  }, []);\n  return data;\n} //----------ScreenPlanet component, itself\n\n\nconst ScreenPlanet = props => {\n  const planet = props.planet;\n  const dataLocal = useData().filter(data => data.category.toLowerCase() === planet.id).pop();\n  const screenDivClasses = classNames('screen', {\n    flex: planet.infoToggle\n  }, {\n    opacityOff: planet.infoToggle\n  });\n\n  function onScreenHandle() {\n    const string = dataLocal.category;\n\n    if (dataLocal === undefined) {\n      return 'error loading the page';\n    } else {\n      return /*#__PURE__*/React.createElement(\"string\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      });\n    }\n  }\n\n  const onScreen = onScreenHandle();\n  console.log(planet);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: screenDivClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 3\n    }\n  }, onScreen);\n};\n\nexport default ScreenPlanet;","map":{"version":3,"sources":["/home/othmay/repos/TarayahWorld/src/components/Planets/ScreenPlanet.js"],"names":["React","useEffect","useState","classNames","firebase","News","Art","Music","About","Socials","Contact","useData","data","setData","unsuscribe","firestore","collection","onSnapshot","snapshot","newData","docs","map","doc","id","ScreenPlanet","props","planet","dataLocal","filter","category","toLowerCase","pop","screenDivClasses","flex","infoToggle","opacityOff","onScreenHandle","string","undefined","onScreen","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CAEA;;AAEA,SAASC,OAAT,GAAmB;AAEjB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAGV,QAAQ,CAACW,SAAT,GAAqBC,UAArB,CAAgC,SAAhC,EAClBC,UADkB,CACNC,QAAD,IAAc;AACxB,YAAMC,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBC,GAAD,KAAU;AAC5CC,QAAAA,EAAE,EAAED,GAAG,CAACC,EADoC;AAE5C,WAAGD,GAAG,CAACV,IAAJ;AAFyC,OAAV,CAAlB,CAAhB;AAIFC,MAAAA,OAAO,CAACM,OAAD,CAAP;AACC,KAPkB,CAAnB;AAQA,WAAO,MAAML,UAAU,EAAvB;AACD,GAVQ,EAUN,EAVM,CAAT;AAWA,SAAOF,IAAP;AACD,C,CAED;;;AAEA,MAAMY,YAAY,GAAIC,KAAD,IAAW;AAE5B,QAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AAEA,QAAMC,SAAS,GAAGhB,OAAO,GAAGiB,MAAV,CAAiBhB,IAAI,IAAIA,IAAI,CAACiB,QAAL,CAAcC,WAAd,OAAgCJ,MAAM,CAACH,EAAhE,EAAoEQ,GAApE,EAAlB;AAEH,QAAMC,gBAAgB,GAAI7B,UAAU,CACnC,QADmC,EAEnC;AAAC8B,IAAAA,IAAI,EAACP,MAAM,CAACQ;AAAb,GAFmC,EAGnC;AAACC,IAAAA,UAAU,EAACT,MAAM,CAACQ;AAAnB,GAHmC,CAApC;;AAMC,WAASE,cAAT,GAA0B;AACxB,UAAMC,MAAM,GAAGV,SAAS,CAACE,QAAzB;;AACA,QAAGF,SAAS,KAAKW,SAAjB,EAA4B;AAAC,aAAO,wBAAP;AAAgC,KAA7D,MACI;AAAC,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAAiB;AACvB;;AAGD,QAAMC,QAAQ,GAAGH,cAAc,EAA/B;AAEFI,EAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;AAEE,sBACA;AAAK,IAAA,SAAS,EAAEM,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,QADH,CADA;AAKD,CA5BD;;AA6BA,eAAef,YAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport classNames from 'classnames';\nimport firebase from '../../Firebase/firebase.js';\nimport News from './Screens/News.js';\nimport Art from './Screens/Art.js';\nimport Music from './Screens/Music.js';\nimport About from './Screens/About.js';\nimport Socials from './Screens/Socials.js';\nimport Contact from './Screens/Contact.js';\n\n//----------firebase extractor\n\nfunction useData() {\n\n\t\tconst [data, setData] = useState([])\n\n\t\tuseEffect(() => {\n\t\t\t\tconst unsuscribe = firebase.firestore().collection('planets')\n\t\t\t\t.onSnapshot((snapshot) => {\n\t\t\t\t\t\tconst newData = snapshot.docs.map((doc) => ({\n\t\t\t\t\t\tid: doc.id,\n\t\t\t\t\t\t...doc.data()\n\t\t\t\t\t\t}))\n\t\t\t\tsetData(newData)\n\t\t\t\t})\n\t\t\t\treturn () => unsuscribe()\n\t\t}, [])\n\t\treturn data\n}\n\n//----------ScreenPlanet component, itself\n\nconst ScreenPlanet = (props) => {\n\t\n    const planet = props.planet\n\n    const dataLocal = useData().filter(data => data.category.toLowerCase() === planet.id).pop()\n\n\tconst screenDivClasses = (classNames(\n\t\t'screen',\n\t\t{flex:planet.infoToggle},\n\t\t{opacityOff:planet.infoToggle}\n\t))\n\t\t\n\t\tfunction onScreenHandle() {\n\t\t\t\tconst string = dataLocal.category\n\t\t\t\tif(dataLocal === undefined) {return 'error loading the page'}  \n\t\t\t\telse{return <string/>}\n\t\t}\n\n\n\t\tconst onScreen = onScreenHandle()\n\nconsole.log(planet)\n\n\t\treturn (\n\t\t<div className={screenDivClasses}>\n\t\t\t\t{onScreen}\n\t\t</div>\n\t\t)\n}\nexport default ScreenPlanet;\n"]},"metadata":{},"sourceType":"module"}